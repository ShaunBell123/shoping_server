name: Deploy to Staging EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/test_project

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform/test_project

      - name: Get Terraform outputs
        run: echo "EC2_ID=$(terraform output -raw ec2_id)" >> $GITHUB_ENV
        working-directory: terraform/test_project

      - name: Wait for EC2 and EBS checks
        env:
          INSTANCE_ID: ${{ env.EC2_ID }}
        run: |
          echo "Waiting for EC2 instance $INSTANCE_ID to pass all status checks..."

          while true; do
            STATUS=$(aws ec2 describe-instance-status \
              --instance-ids $INSTANCE_ID \
              --query 'InstanceStatuses[0].InstanceStatus.Status' \
              --output text 2>/dev/null || echo "initializing")

            SYSTEM_STATUS=$(aws ec2 describe-instance-status \
              --instance-ids $INSTANCE_ID \
              --query 'InstanceStatuses[0].SystemStatus.Status' \
              --output text 2>/dev/null || echo "initializing")

            echo "System=$SYSTEM_STATUS | Instance=$STATUS"

            if [ "$STATUS" = "ok" ] && [ "$SYSTEM_STATUS" = "ok" ]; then
              echo "All status checks passed."
              break
            fi

            sleep 15
          done

      - name: Deploy via SSM using Git
        env:
          EC2_ID: ${{ env.EC2_ID }}
          MY_GITHUB_PAT: ${{ secrets.MY_GITHUB_PAT }}
        run: |
          aws ssm send-command \
            --instance-ids "$EC2_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\": [
              \"#!/bin/bash\",

              \"sudo apt-get update -y\",
              \"sudo apt-get install -y docker.io docker-compose git\",

              \"sudo systemctl enable docker\",
              \"sudo systemctl start docker\",

              \"cd /home/ubuntu\",

              \"if [ ! -d shoping_server ]; then\",
              \"  git clone https://${MY_GITHUB_PAT}@github.com/ShaunBell123/shoping_server.git\",
              \"else\",
              \"  cd shoping_server && git pull origin main\",
              \"fi\",

              \"cd /home/ubuntu/shoping_server\",
              \"sudo docker compose up -d\"
            ]}"
