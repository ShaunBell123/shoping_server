name: Deploy to Staging EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/test_project

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform/test_project

      - name: Get Terraform outputs
        run: |
          echo "EC2_ID=$(terraform output -raw ec2_id)" >> $GITHUB_ENV
        working-directory: terraform/test_project

      - name: Wait until EC2 is managed by SSM
        run: |
          for i in {1..10}; do
            if aws ssm describe-instance-information --query "InstanceInformationList[?InstanceId=='$EC2_ID']" | grep -q "$EC2_ID"; then
              break
            fi
            echo "Waiting for EC2 instance to be managed by SSM..."
            sleep 30
          done

      - name: Deploy via SSM using Git
        env:
          EC2_ID: ${{ env.EC2_ID }}
        run: |
          aws ssm send-command \
          --instance-ids $EC2_ID \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy application from Git repository" \
          --parameters '{"commands":["cd /home/ubuntu/app && if [ -d \"shoping_server\" ]; then cd shoping_server && git pull origin main; else git clone https://github.com/ShaunBell123/shoping_server.git; fi"]}'
