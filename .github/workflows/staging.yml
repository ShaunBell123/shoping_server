name: Deploy to Staging EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/test_project

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform/test_project

      - name: Get Terraform outputs
        run: echo "EC2_ID=$(terraform output -raw ec2_id)" >> $GITHUB_ENV
        working-directory: terraform/test_project

      - name: Wait for SSM + Docker ready
        env:
          EC2_ID: ${{ env.EC2_ID }}
        run: |
          echo "Waiting for SSM agent and Docker to be ready..."
          while true; do
            STATUS=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=$EC2_ID" \
              --query 'InstanceInformationList[0].PingStatus' \
              --output text 2>/dev/null || echo "offline")

            if [ "$STATUS" = "Online" ]; then
              echo "âœ… SSM agent is online."
              break
            fi

            echo "SSM not ready yet ($STATUS)..."
            sleep 10
          done

          # Optional: wait for Docker specifically
          aws ssm send-command \
            --instance-ids "$EC2_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Wait for Docker" \
            --parameters '{"commands":["until command -v docker >/dev/null 2>&1; do echo waiting for docker...; sleep 10; done; echo docker ready."]}' \
            --output text


      - name: Deploy via SSM using Git
        env:
          EC2_ID: ${{ env.EC2_ID }}
          MY_GITHUB_PAT: ${{ secrets.MY_GITHUB_PAT }}
        run: |
          aws ssm send-command \
            --instance-ids "$EC2_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\": [\"sudo -i -u ubuntu bash -c 'cd /home/ubuntu/app && \
            if [ -d shoping_server ]; then \
              cd shoping_server && git pull origin main; \
            else \
              git clone https://${MY_GITHUB_PAT}@github.com/ShaunBell123/shoping_server.git; \
              cd shoping_server; \
            fi; \
            docker compose down; \
            docker compose up -d'\"]}"
